<?xml version="1.0"?>
<launch>

    <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="true"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="extra_gazebo_args" default=""/>
  <arg name="gui" default="true"/>
  <arg name="recording" default="false"/>
  <arg name="world" default="sphere_world" />
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>
  <arg name="physics" default="ode"/>
  <arg name="verbose" default="false"/>
  <arg name="world_name" value="$(find my_package)/worlds/$(arg world).world"/>
  <arg name="respawn_gazebo" default="false"/>
  <arg name="use_clock_frequency" default="false"/>
  <arg name="pub_clock_frequency" default="100"/>

  <!-- set use_sim_time flag -->
  <param name="/use_sim_time" value="$(arg use_sim_time)"/>

  <!-- set command arguments -->
  <arg unless="$(arg paused)" name="command_arg1" value=""/>
  <arg     if="$(arg paused)" name="command_arg1" value="-u"/>
  <arg unless="$(arg recording)" name="command_arg2" value=""/>
  <arg     if="$(arg recording)" name="command_arg2" value="-r"/>
  <arg unless="$(arg verbose)" name="command_arg3" value=""/>
  <arg     if="$(arg verbose)" name="command_arg3" value="--verbose"/>
  <arg unless="$(arg debug)" name="script_type" value="gzserver"/>
  <arg     if="$(arg debug)" name="script_type" value="debug"/>

  <!-- We resume the logic in empty_world.launch -->
   <!-- <include file="$(find gazebo_ros)/launch/empty_world.launch"> 
    <arg name="paused" value="false"/>
  </include> -->

  <!-- start gazebo server-->
  <group if="$(arg use_clock_frequency)">
    <param name="gazebo/pub_clock_frequency" value="$(arg pub_clock_frequency)" />
  </group>
  <node name="gazebo" pkg="gazebo_ros" type="$(arg script_type)" respawn="$(arg respawn_gazebo)" output="screen"
	args="$(arg command_arg1) $(arg command_arg2) $(arg command_arg3) -e $(arg physics) $(arg extra_gazebo_args) $(arg world_name)" />
	
  <!-- start gazebo client -->
  <group if="$(arg gui)">
    <node name="gazebo_gui" pkg="gazebo_ros" type="gzclient" respawn="false" output="screen"/>
  </group>

  <!-- Load the URDF into the ROS Parameter Server -->
  <param name="robot_description" command="cat '$(find my_package)/urdf/sr_hand_vm_compatible_position_controlled.urdf'"/>
	 
  <!-- Start Rviz -->  
   <!--<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" ></node>-->
   <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"/>
   <node name="rviz" pkg="rviz" type="rviz" args="-d '$(find my_package)/rviz/robot_config.rviz'" />


  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
   <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
	args="-urdf -model my_robot -param robot_description"/> 

  <!-- ROS CONTROL-->
  <rosparam file="$(find my_package)/config/motors_config_position_control.yaml" command="load" ns="/my_robot" />

  <node name="controller_spawner" pkg="controller_manager" type="spawner" output="screen" args="--namespace=/my_robot
      joint_state_controller
      rh_WRJ1_position_controller
      rh_WRJ2_position_controller
      rh_FFJ1_position_controller
      rh_FFJ2_position_controller
      rh_FFJ3_position_controller
      rh_FFJ4_position_controller
      rh_MFJ1_position_controller
      rh_MFJ2_position_controller
      rh_MFJ3_position_controller
      rh_MFJ4_position_controller
      rh_RFJ1_position_controller
      rh_RFJ2_position_controller
      rh_RFJ3_position_controller
      rh_RFJ4_position_controller
      rh_LFJ1_position_controller
      rh_LFJ2_position_controller
      rh_LFJ3_position_controller
      rh_LFJ4_position_controller
      rh_LFJ5_position_controller
      rh_THJ1_position_controller
      rh_THJ2_position_controller
      rh_THJ3_position_controller
      rh_THJ4_position_controller
      rh_THJ5_position_controller
      --shutdown-timeout 3">
  </node>

</launch>